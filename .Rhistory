5+5
a <- 10
a <- 10
a
b
b = 10 # usando o '=' para atribuir valor
b
10 -> c # usando de modo 'invertido'
c -> d
a <- 10
b <- 5
c <- a + b
a <- "Heitor"
b <- "João"
c <- a + b
# Esse é meu primeiro programa em R
a <- 10 # usando o '<-' para atribuir valor
a
b = 10 # usando o '=' para atribuir valor
b
10 -> c # usando de modo 'invertido'
c -> d
a <- 10
b <- 5
c <- a + b
a <- "Heitor"
b <- "João"
#c <- a + b erro que daria por somar algo não númerico
c <- a + b
a <- "Heitor"
b <- "João"
#c <- a + b erro que daria por somar algo não númerico
c <- c(a,b)
c
?c
a <- c(10, 5, 15, 20)
a
a[0]
a[1]
?summary
summary(a)
summary(c)
?str_c
install.packages("stringr")
library(stringr)
?str_c
nome <- "Josué"
sobrenome <- "Bueno"
nomecompleto <- str_c(nome, sobrenome)
nomecompleto
nomecompleto <- str_c(nome," ",sobrenome)
nomecompleto
# Soma
5 + 5
# Subtração
10 - 8
# Divisão
9 / 3
# Multiplicação
4 * 2
# Potência
4 ** 2
4 ^ 2
# Igual
5 == 6
5 == 5
# Diferente
5 != 6
5 != 5
# Maior?
4 > 2
5 > 10
# Menor?
4 < 2
5 < 10
# Maior ou igual?
4 >= 5
4 >= 4
# Menor ou igual?
4 <= 5
4 <= 4
# Negação
!6 == 8
!6 != 6
salario <- 1800.00
horas <- 300
SH <- salario/horas
SH <- salario/horas
salario <- 1832.99
SH <- salario/horas
SHi <- as.integer(salario/horas)
SHi * 5
SHr <- round(salario/horas)
nome1 == nome2
nome1 <- "Josué Bueno"
nome2 <- "Tony Stark"
nome1 <- "Josué Bueno"
nome2 <- "Tony Stark"
nome1 == nome2
nome2 <- "Josué Bueno"
nome1 == nome2
CargaHoraria <- c(220, 220, 150, 100, 100)
summary(CargaHoraria)
CargaHoraria <- as.factor(CargaHoraria)
summary(CargaHoraria)
salario <- 1832.99
horas <- 300
L1 <- salario > horas
L1
Logico <- TRUE
nomes <- c(nome1, nome2)
nome1 <- "Josué Bueno"
nome2 <- "Tony Stark"
nomes <- c(nome1, nome2)
# Vetor de caracteres
is.vector(nomes)
mode(nomes)
# Vetor numérico
is.vector(horas)
# Vetor lógico
is.vector(L1)
mode(L1)
mode(horas)
a <- c(5,3,1,2)
b <- c(5,3,"1",2)
a
b
is.list(a)
is.list(b)
is.vector(a)
is.vector(b)
b <- as.numeric(b)
b
b <- list(10,"a",8.5)
is.list(b)
b
str(b)
?str
e <- list(c(10,2,3),"b", 10000)
str(e)
e[[1][1]]
e[[1]][1]
View(e)
m <- matrix(1:9, nrow = 3)
m <- matrix(1:9, nrow = 3)
m
View(m)
# m[linha, coluna]
m[2,3]
m[2,3] <- "a"
m
# Definindo a Área de Trabalho
setwd("C:\Users\marci\OneDrive\Documentos\Algoritmos 2021\aprendendo-r")
# Definindo a Área de Trabalho
setwd("C:/Users/marci/OneDrive/Documentos/Algoritmos 2021/aprendendo-r")
# Importanto base de dados
df <- read.csv("teste.csv")
# Analisando um data frame
view(df)
View(df)
# Analisando um data frame
View(df)
# Analisando um data frame
View(df)
# Importanto base de dados
df <- read.csv("teste.csv")
# Analisando um data frame
View(df)
# Definindo a Área de Trabalho
setwd("C:/Users/marci/OneDrive/Documentos/Algoritmos 2021/aprendendo-r")
# Importanto base de dados
df <- read.csv("teste.csv")
# Analisando um data frame
View(df)
# Definindo a Área de Trabalho
setwd("C:/Users/marci/OneDrive/Documentos/Algoritmos 2021/aprendendo-r")
# Importanto base de dados
df <- read.csv("teste.csv")
# Importanto base de dados
df <- read.csv("teste.csv")
df <- read.csv("teste.csv")
# Importanto base de dados
DF <- read.csv("teste.csv")
# Definindo a Área de Trabalho
setwd("C:/Users/marci/OneDrive/Documentos/Algoritmos 2021/aprendendo-r")
# Importanto base de dados
DF <- read.csv("teste.csv")
View(DF)
# Importanto base de dados
DF <- read.csv("teste.csv")
View(DF)
# Importanto base de dados
DF <- read.csv("teste2.csv")
View(DF)
# Analisando um data frame
View(df)
# Analisando um data frame
View(df)
View(DF)
# Analisando um data frame
View(DF)
str(DF)
summary(DF)
# Selecionando variaveis
DF
DF[1]
DF$NOITE_DIA
Col1 <- DF[1]
Col2 <- DF$DIA_SEM
DF$DIA_SEM # Mostra a coluna selecionada e transforma em factor
Col1 <- DF[1]
Col2 <- DF$DIA_SEM
# Excluindo variavel
DF$DIA_SEM <- NULL
DF$UPS
DF$UPS <- as.factor(DF$UPS) # Transformando em fator
summary(DF$UPS)
# Criando uma nova variavel dentro do df
DF$UPS
# Criando uma nova variavel dentro do df
DF$Nova <- "a"
class(DF$Nova)
DF$Nova <- c(2,3,4)
DF$Nova <- c(2,3,4,NA,NA,NA,NA,NA,NA,NA)
DF$Nova <- c(2,3,4,NA,NA,NA,NA,NA,NA)
DF$Nova <- NA
DF$Nova[1:3] <- c(2,4,3)
vogais <- c("a","e","i","o","u")
vogais[3]
vogais[-3]
vogais[3:5] # acessando vogais de 3 até 5
length(vogais)
vogais[3:length(vogais)]
a <- 3
b <- 5
vogais[a:b]
vogais[vogais == "e"]
a <- c(1,2,3,4,5)
a[a>2]
a[a>=2]
setwd("C:/Users/marci/OneDrive/Documentos/Algoritmos 2021/aprendendo-r")
df <- read.csv("teste2.csv")
df[1]
df[1,]
df[1:6]
df[-4]
# Modificando o df
df <- df[c(-2,-3,-5,-1)]
df
df[1,1]
# Filtrando as variaveis
df[4,1]
View(df)
# Filtrando as variaveis
df[2,1]
# Filtrando as variaveis
df[6,1]
df$FX_HORA[1]
df$CAMINHAO[1:3]
df$TEMPO == "BOM"
df <- df[df$TEMPO == "BOM"]
df <- df[df$TEMPO == 1,]
View(df)
df <- read.csv("teste2.csv")
View(df)
df[1]
df[1,] # a primeira linha do df
df[1:6]
df[-4]
# Modificando o df
df <- df[c(-2,-3,-5,-1)] # Excluindo colunas
df
# Filtrando as variaveis
df[6,1]
df$FX_HORA[1]
df$CAMINHAO[1:3]
df$TEMPO == "BOM"
df <- df[df$TEMPO == 1,]
df2 <- read.csv("teste2.csv")
View(df2)
# Testando se a condição é vdd
if (5 == 5) 6 + 6
# else
if (5 != 5) 6 + 6 else "Condição não atendida!"
if (5 != 5) {
6 + 6
}else{
"Condição não atendida!"
}
idade <- c(19,20)
nomes <- c("Josué","Tony")
df <- data.frame(nomes,idade)
View(df)
if (df$idade[df$nomes == "Josué"] > df$idade[df$nomes == "Tony"]) {
"Mais velho é o: " + df[1,1]
}else{
"Mais velho é o: " + df[2,1]
}
if (df$idade[df$nomes == "Josué"] > df$idade[df$nomes == "Tony"]) {
"Mais velho é o: Josué"
}else{
"Mais velho é o: Tony"
}
idade <- c(19,20,21,22,20,19)
nomes <- c("Josué","Tony","Steve","Rocket","Groot","Visão")
df <- data.frame(nomes,idade)
View(df)
print(i)
for (i in idade) {
print(i)
}
v <- 0
for (i in df$idade) {
if(i > v) {v <- i}
}
df$nomes[df$idade == v]
x <- 0
while (x < 10) {
print(x)
x++
}
x <- 0
while (x < 10) {
print(x)
x = x++
}
x <- 0
while (x < 10) {
print(x)
x = x + 1
}
x <- 0
cont <- 0
idade100 <- 0
while (x < 100) {
cont <- cont + 1
idades100[cont] <- idade[cont]
x <- x + idade[cont]
}
x <- 0
cont <- 0
idade100 <- 0
while (x < 100) {
cont <- cont + 1
idade100[cont] <- idade[cont]
x <- x + idade[cont]
}
idade
idade100
sum(idade100)
y <- 0
x <- 0
cont <- 0
idade100 <- 0
while (y < 100) {
cont <- cont + 1
idade100[cont] <- idade[cont]
x <- x + idade[cont]
y <- x + idade[cont+1]
}
idade
idade100
sum(idade100)
a <- c(100,200,50,24,2)
sum(a)
x <- 0
for (i in a) {
x <- x + i
}
print(x)
b <- c(140,200,21,452,31)
soma <- function(y){
x <- 0
for (i in y) {
x <- x + i
}
print(x)
}
soma(a)
soma(b)
sum(b)
View(soma)
soma2 <- function(y,z){
x <- 0
c <- 0
for (i in y) {
c <- c + 1
x <- z[c] + i
print(x)
}
}
soma2(a,b)
soma2(b,a)
b <- c(140,200,21,452,31,2,0)
soma2 <- function(y,z){
x <- 0
c <- 0
for (i in y) {
c <- c + 1
x <- z[c] + i
print(x)
}
}
soma2(a,b)
soma2(b,a)
a + b
sum(a)
sum(b)
install.packages("readr")
install.packages("tidyverse")
